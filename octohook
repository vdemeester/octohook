#!/bin/sh

# This program is licensed under the GNU GPL version 2 or later.
# (c) Vincent Demeester <vincent+github@demeester.fr>, 2012
# For details, see LICENSE. To submit patches, you have to agree to
# license your code under the GNU GPL version 2 or later.

# While the following is not legally binding, the author would like to
# explain the choice of GPLv2+ over GPLv3+.
# The author prefers GPLv3+ over GPLv2+ but feels it's better to maintain
# full compability with git. In case git ever changes its licensing terms,
# this software will most likely follow suit.

# The most important line in any shell program.
set -e

# There's a lot of different ways to do usage messages in shell scripts.
# This is my favorite: you write the usage message in a comment --
# typically right after the shebang line -- *BUT*, use a special comment prefix
# like `#/` so that its easy to pull these lines out.
#
#/ Usage: octohook <command>
#/ An advanced and flexible git hooks system.
#/
#/      run HOOK            run hooks for the given HOOK
#/      install             install the hook system
#/      uninstall           uninstall the hook system
#/      activate [HOOK]     activate the given HOOK or
#/                          all hooks if no argument given
#/      deactivate [HOOK]   deactivate the given HOOK or
#/                          all hooks if no argument given
#/      help                print this help message
#/

# This is the second part of the usage message technique: `grep` yourself
# for the usage message comment prefix and then cut off the first few
# characters so that everything lines up.
help() {
    grep '^#/' <"$0" | cut -c4-
    exit 0
}

# Public: Current version of octohook
export OCTOHOOK_VERSION="0.0.1"

# Defining some environment variables if not already given
# Public: Debug flag
test -n "$OCTOHOOK_DEBUG"           && set -vx
# Public: XDG_CONFIG_HOME (should be set by the Desktop Env.)
test -z "$XDG_CONFIG_HOME"          && XDG_CONFIG_HOME="$HOME/.config"
# Public: Git config folder
test -z "$GIT_HOOK_D"               && GIT_HOOK_D="$XDG_CONFIG_HOME/git/hooks.d"
# Public: Octohook config folder
test -z "$OCTOHOOK_FOLDER"          && OCTOHOOK_FOLDER="$XDG_CONFIG_HOME/octohook"
# Public: Octohook config folder
test -z "$OCTOHOOK_HOOK_D"          && OCTOHOOK_HOOK_D="$OCTOHOOK_FOLDER/hooks.d"
# Public: local Octohook config folder
test -z "$OCTOHOOK_LOCAL_HOOK_D"    && OCTOHOOK_LOCAL_HOOK_D="hooks"
# Private: CONFIGURATION file (sourcing it \o/)
test -r "$OCTOHOOK_FOLDER/config"   && . "$OCTOHOOK"

# Helper class
SELF=$(basename $0)

# Private: print a debug line if $OCTOHOOK_DEBUG is defined
#
# $@ - string(s) to print
debug() {
    [ -n "$OCTOHOOK_DEBUG" ] && echo "$SELF: debug: $@"
}

# Private: print a verbose line if $OCTOHOOK_VERBOSE or $OCTOHOOK_DEBUG present
#
# $@ - string(s) to print
verbose() {
    if [ -n "$OCTOHOOK_DEBUG" ] || [ -n "$OCTOHOOK_VERBOSE" ]; then echo "$SELF: verbose: $@"; fi
}

# Private: print a fatal line and exit
#
# $1 - string(s) to print
# $2 - exiting code
fatal() {
    echo "$SELF: fatal: $1" >&2
    exit $2
}

# Private: print a error line
#
# $1 - string(s) to print
error() {
    echo "$SELF: error: $1" >&2
}

# Private: print a info line
#
# $1 - string(s) to print
info() {
    echo "$SELF: info: $1"
}

# Private: Is the curent directory a git repository
is_in_git() {
    GITDIR=$(git rev-parse --show-toplevel)
    if ! test $? -eq 0; then
        fatal "$1 must be run inside a git repository" 1
    fi
}

# Private: move (backup) a directory
#
# $1 - The folder to move (backup)
backup_dir() {
    mv $1 $1.old
}
# Private: move back a directory
#
# $1 - the folder to move back
unbackup_dir() {
    mv $1.old $1
}

# Private: init hooks to use octohook
#
# Init the scripts for possible git hooks and create the
# local hook folder (helper).
#
# $1 - the root folder
init_hooks() {
    GIT_HOOK_FOLDER="$1/.git/hooks"
    mkdir $GIT_HOOK_FOLDER
    for file in applypatch-msg commit-msg post-applypatch post-checkout post-commit post-merge post-receive pre-applypatch pre-auto-gc pre-commit prepare-commit-msg pre-rebase pre-receive update
    do
        cat > ${GIT_HOOK_FOLDER}/${file} << EOF
#!/bin/sh
octohook run "\$0" "\$@"
EOF
        chmod +x "${GIT_HOOK_FOLDER}/${file}"
    done
    if test -e "$1/$OCTOHOOK_LOCAL_HOOK_D"; then
        mkdir "$1/$OCTOHOOK_LOCAL_HOOK_D"
    fi
}

# Private: remove hooks if they use octohook
#
# $1 - the root folder
remove_hooks() {
    GIT_HOOK_FOLDER="$1/.git/hooks"
    GIT_OLD_HOOK_FOLDER="$1/.git/hooks.old"
    if ! test -d $GIT_OLD_HOOK_FOLDER; then 
        fatal "Error, hooks.old doesn't exists, aborting uninstall to not destroy something" 1
    fi
    rm -rf $GIT_HOOK_FOLDER
    unbackup_dir $GIT_HOOK_FOLDER
}

# Private : init octohook if not alreay init
init_octohook() {
    if ! test -d $GIT_HOOK_D; then
        info "Initialize git hooks folder ($GIT_HOOK_D)"
        mkdir -p "$GIT_HOOK_D"
    fi
    if ! test -d $OCTOHOOK_HOOK_D; then
        info "Initialize octohook hooks folder ($OCTOHOOK_HOOK_D)"
        mkdir -p "$OCTOHOOK_HOOK_D"
    fi
}

# Private : finds hoooks
#
# $1 - folder to look "in"
# $2 - name of the hook
find_hooks() {
    FOLDER="$1"
    shift
    HOOK="$1"
    shift
    find -L "${FOLDER}/${HOOK}" -perm +111 -type f -o -path ${FOLDER} -prune 2>/dev/null | grep -v "^.$" | sort
}

# Private : list folders that holds hook
#
# $1 - the hook name
hook_folders() {
    echo "$OCTOHOOK_LOCAL_HOOK_D $GIT_HOOK_D"
}

# Private : run the given hook
#
# $1 - the hook name to run
run_hooks() {
    hook="$1"
    shift
    set +e
    # 1. List hooks, in order (local, then global)
    # 2. Run them
    for hook_folder in `hook_folders $hook`; do
        for realhook in `find_hooks $hook_folder $hook`; do
            result=$($realhook $*)
            if test $? -gt 0; then
                echo "@@@@@@@@@@@@@@@@@@@@ HOOK FAILURE @@@@@@@@@@@@@@@@@@@@"
                echo "@ Hook    :   $hook"
                echo "@ Script  :   $realhook"
                echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
                echo "$result"
                echo "@@@@@@@@@@@@@@@@@@@@ HOOK FAILURE @@@@@@@@@@@@@@@@@@@@"
                run_octohook "$hook" "post"
                return 1
            else
                echo "$result"
            fi
        done
    done
    set -e
}

# Private : run octohook hook
#
# $1 - the hook name
# $2 - the prefix
run_octohook() {
    hook="$1"
    shift
    prefix="$1"
    shift
    if test -d $OCTOHOOK_HOOK_D/$hook; then
        for octohook in `find_hooks "$OCTOHOOK_HOOK_D" "$hook"`; do
            base_octohook="$(basename $octohook)"
            subs="\${base_octohook##$prefix}"
            if ! test "$base_octohook" = "$(eval echo $subs)"; then
                $octohook
            fi
        done
    fi
}

# Public: Run a hook
#
# The main method of octohook as it is called everytime a hook is executed
# by git.
run() {
    init_octohook
    is_in_git
    if [ ! -z "${GIT_DIR}" ] ; then
        unset GIT_DIR
    fi
    shift
    hook=$(basename $1)
    shift
    if test -z "$hook"; then
        fatal "run requires a hook argument" 1
    fi
    # 1. First run OCTOHOOK (pre) hooks
    run_octohook "$hook" "pre"
    # 2. Executes hooks
    run_hooks "$hook" "$*"
    # 3. Finally run OCTOHOOK (post) hooks
    run_octohook "$hook" "post"
}

# Public: Install the hook system based on octohook
install() {
    init_octohook
    is_in_git $PWD
    local GIT_OLD_HOOK_FOLDER="$GITDIR/.git/hooks.old"
    if test -d $GIT_OLD_HOOK_FOLDER; then 
        fatal "Error, hooks.old does exists, aborting install to not destroy something" 1
    fi
    backup_dir "$GITDIR/.git/hooks"
    init_hooks "$GITDIR"
}

# Public: Uninstall the hook system
uninstall() {
    init_octohook
    is_in_git $PWD
    remove_hooks "$GITDIR"
}

# Public: Activate a hook (or all)
activate() {
    init_octohook
    is_in_git
    fatal "Not yet implemented" 10
}

# Public: Deactivate a hook (or all)
deactivate() {
    init_octohook
    is_in_git
    fatal "Not yet implemented" 10
}

# The main "loop"
case $1 in
    run )
        run $*
        ;;
    install )
        install
        ;;
    uninstall )
        uninstall
        ;;
    activate )
        shift
        activate $*
        ;;
    deactivate )
        shift
        deactivate $*
        ;;
    version | --version )
        echo "$OCTOHOOK_VERSION"
        exit 0
        ;;
    help | * )
        help
        exit 1
        ;;
esac

